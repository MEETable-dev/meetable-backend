{
  "swagger": "2.0",
  "info": {
    "title": "MEETable API Docs",
    "description": "MEETable api 문서입니다",
    "version": "1.0.0"
  },
  "host": "",
  "servers": [
    {
      "url": "/"
    }
  ],
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "bearerAuth": {
      "name": "authorization",
      "type": "apiKey",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "유저 인증 관련(회원가입/로그인)"
    },
    {
      "name": "home",
      "description": "홈 + 사이드바 + 전체 약속 목록"
    },
    {
      "name": "promise",
      "description": "약속 생성 및 약속 세부"
    },
    {
      "name": "calendar",
      "description": "일정/달력 관련"
    },
    {
      "name": "member",
      "description": "회원정보"
    }
  ],
  "paths": {
      "/auth/signup": {
          "post": {
              "tags": ["auth"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "signToken": {
                                  "example": "string"
                              },
                              "marketingPolicy": {
                                  "example": "T or F"
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "400": {
                      "description": "Bad Request"
                  }
              }
          }
      },
      "/auth/login": {
          "post": {
              "tags": ["auth"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "email": {
                                  "example": "string"
                              },
                              "pwd": {
                                  "example": "string"
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              }
          }
      },
      "/auth/signToken": {
          "post": {
              "tags": ["auth"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "name": {
                                  "example": "string"
                              },
                              "emailToken": {
                                  "example": "string"
                              },
                              "pwd": {
                                  "example": "string"
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  }
              }
          }
      },
      "/auth/token": {
          "post": {
              "tags": ["auth"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "accessToken": {
                                  "example": "string"
                              },
                              "refreshToken": {
                                  "example": "string"
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              }
          }
      },
      "/auth/test": {
          "get": {
              "description": "test api",
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "401": {
                      "description": "Unauthorized"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/auth/sendVerifyCode": {
          "post": {
              "tags": ["auth"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "email": {
                                  "example": "string"
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "500": {
                      "description": "Internal Server Error"
                  }
              }
          }
      },
      "/auth/confirmVerifyCode": {
          "post": {
              "tags": ["auth"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "email": {
                                  "example": "string"
                              },
                              "verifyCode": {
                                  "example": "string"
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "400": {
                      "description": "Bad Request"
                  },
                  "401": {
                      "description": "Unauthorized"
                  }
              }
          }
      },
      "/auth/findEmail": {
          "get": {
              "tags": ["auth"],
              "description": "",
              "parameters": [
                  {
                      "name": "email",
                      "in": "query",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "name": "name",
                      "in": "query",
                      "required": true,
                      "type": "string"
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Found"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              }
          }
      },
      "/auth/resetpwd": {
          "patch": {
              "tags": ["auth"],
              "description": "비회원이면 헤더에 @, body에 emailToken, newPwd 주고 회원이면 헤더에 access token, body에 originalPwd, newPwd 주기",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "emailToken": {
                                  "example": "string"
                              },
                              "newPwd": {
                                  "example": "string"
                              },
                              "originalPwd": {
                                  "example": "string"
                              }
                          }
                      }
                  }
              ],
              "security": [
                  {
                      "bearerAuth": []
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  }
              }
          }
      },
      "/auth/logout": {
          "post": {
              "tags": ["auth"],
              "description": "",
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "401": {
                      "description": "Unauthorized"
                  },
                  "404": {
                      "description": "Not Found"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/promise/username": {
          "get": {
              "tags": ["promise"],
              "description": "return username if access token available",
              "responses": {
                  "200": {
                      "description": "Found user name"
                  },
                  "400": {
                      "description": "No header"
                  },
                  "401": {
                      "description": "access denied(non member) or jwt expired"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/promise/create": {
          "post": {
              "tags": ["promise"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "promise_name": {
                                  "example": "string"
                              },
                              "weekvsdate": {
                                  "example": "W or D"
                              },
                              "ampmvstime": {
                                  "example": "T or F"
                              },
                              "start_time": {
                                  "example": "09:00:00"
                              },
                              "end_time": {
                                  "example": "17:00:00"
                              },
                              "date": {
                                  "example": ["2023-12-17", "2023-12-25"]
                              },
                              "canallconfirm": {
                                  "example": "T or F"
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "OK"
                  },
                  "401": {
                      "description": "Unauthorized"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/promise/participate": {
          "post": {
              "tags": ["promise"],
              "description": "회원일 경우 password는 not required",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "promiseId": {
                                  "example": "string(숫자만 parsing)"
                              },
                              "nickname": {
                                  "example": "string"
                              },
                              "password": {
                                  "example": "string"
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "OK"
                  },
                  "400": {
                      "description": "Bad Request"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/promise/time": {
          "post": {
              "tags": ["promise"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "promiseId": {
                                  "example": 1
                              },
                              "weekAvailable": {
                                  "example": ["SUN", "MON", "TUE"]
                              },
                              "dateAvailable": {
                                  "example": [
                                      "2024-01-15",
                                      "2024-01-16",
                                      "2024-01-17"
                                  ]
                              },
                              "weektimeAvailable": {
                                  "example": [
                                      "SUN 00:00:00 00:30:00",
                                      "SUN 00:30:00 01:00:00",
                                      "MON 12:00:00 12:30:00"
                                  ]
                              },
                              "datetimeAvailable": {
                                  "example": [
                                      "2024-01-15 00:00:00 00:30:00",
                                      "2024-01-16 00:30:00 01:00:00",
                                      "2024-01-17 12:00:00 12:30:00"
                                  ]
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "400": {
                      "description": "Bad Request"
                  },
                  "401": {
                      "description": "Unauthorized"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/promise/deletetime": {
          "delete": {
              "tags": ["promise"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "promiseId": {
                                  "example": 1
                              },
                              "weekToDelete": {
                                  "example": ["SUN", "MON", "TUE"]
                              },
                              "dateToDelete": {
                                  "example": [
                                      "2024-01-15",
                                      "2024-01-16",
                                      "2024-01-17"
                                  ]
                              },
                              "weektimeToDelete": {
                                  "example": [
                                      "SUN 00:00:00 00:30:00",
                                      "SUN 00:30:00 01:00:00",
                                      "MON 12:00:00 12:30:00"
                                  ]
                              },
                              "datetimeToDelete": {
                                  "example": [
                                      "2024-01-15 00:00:00 00:30:00",
                                      "2024-01-16 00:30:00 01:00:00",
                                      "2024-01-17 12:00:00 12:30:00"
                                  ]
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "400": {
                      "description": "Bad Request"
                  },
                  "401": {
                      "description": "Unauthorized"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/promise/participants/{promiseid}": {
          "get": {
              "tags": ["promise"],
              "parameters": [
                  {
                      "name": "promiseid",
                      "in": "path",
                      "required": true,
                      "type": "integer"
                  }
              ],
              "description": "return username if access token available",
              "responses": {
                  "200": {
                      "description": "Found user name"
                  },
                  "400": {
                      "description": "No header"
                  },
                  "401": {
                      "description": "access denied(non member) or jwt expired"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/promise/link": {
          "post": {
              "tags": ["promise"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "promiseId": {
                                  "example": "string(숫자만 parsing)"
                              },
                              "nickname": {
                                  "example": "string"
                              },
                              "password": {
                                  "example": "string"
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Created"
                  },
                  "400": {
                      "description": "Bad Request"
                  },
                  "401": {
                      "description": "Unauthorized"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/promise/baseinfo/{promiseid}": {
          "get": {
              "tags": ["promise"],
              "parameters": [
                  {
                      "name": "promiseid",
                      "in": "path",
                      "required": true,
                      "type": "integer"
                  },
                  {
                      "name": "month",
                      "in": "query",
                      "description": "날짜기준, 시간 선택 x시 해당하는 월을 2024-02의 형태로 전달 없을 경우 이번달",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "date",
                      "in": "query",
                      "description": "날짜기준, 시간 선택 O시 해당하는 날짜를 2024-03-11의 형태로 전달 없을 경우 오늘 날짜",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "description": "약속정보 반환",
              "responses": {
                  "200": {
                      "description": "존재하는 약속"
                  },
                  "404": {
                      "description": "promise not found"
                  },
                  "500": {
                      "description": "Internal Server Error"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/promise/hover/{promiseid}": {
          "get": {
              "tags": ["promise"],
              "parameters": [
                  {
                      "name": "promiseid",
                      "in": "path",
                      "required": true,
                      "type": "integer"
                  },
                  {
                      "name": "weekday",
                      "in": "query",
                      "description": "MON, TUE, ... 등의 형식으로 주기 (요일 기준인 경우)",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "date",
                      "in": "query",
                      "description": "2024-02-11의 형식으로 전달 (날짜기준인 경우)",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "starttime",
                      "in": "query",
                      "description": "00:00:00의 형식으로 전달(시간 o인 경우)",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "endtime",
                      "in": "query",
                      "description": "11:00:00의 형식으로 전달(시간 o인 경우)",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "description": "약속정보 반환",
              "responses": {
                  "200": {
                      "description": "존재하는 약속"
                  },
                  "404": {
                      "description": "promise not found"
                  },
                  "500": {
                      "description": "Internal Server Error"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/promise/myinfo/{promiseid}": {
          "get": {
              "tags": ["promise"],
              "parameters": [
                  {
                      "name": "promiseid",
                      "in": "path",
                      "required": true,
                      "type": "integer"
                  },
                  {
                      "name": "month",
                      "in": "query",
                      "description": "날짜기준, 시간 선택 x시 해당하는 월을 2024-02의 형태로 전달 없을 경우 이번달",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "date",
                      "in": "query",
                      "description": "날짜기준, 시간 선택 O시 해당하는 날짜를 2024-03-11의 형태로 전달 없을 경우 오늘 날짜",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "description": "약속정보 반환",
              "responses": {
                  "200": {
                      "description": "존재하는 약속"
                  },
                  "404": {
                      "description": "promise not found"
                  },
                  "500": {
                      "description": "Internal Server Error"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/promise/isparticipate/{promiseid}": {
          "get": {
              "tags": ["promise"],
              "parameters": [
                  {
                      "name": "promiseid",
                      "in": "path",
                      "required": true,
                      "type": "integer"
                  }
              ],
              "description": "약속정보 반환",
              "responses": {
                  "200": {
                      "description": "참여 중/미참여 중"
                  },
                  "401": {
                      "description": "member only"
                  },
                  "500": {
                      "description": "Internal Server Error"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/calendar/add": {
          "post": {
              "tags": ["calendar"],
              "summary": "Add a new calendar event",
              "description": "Allows members to add a new event to their calendar.",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "required": true,
                      "schema": {
                          "type": "object",
                          "properties": {
                              "color": {
                                  "type": "integer",
                                  "example": 5
                              },
                              "name": {
                                  "type": "string",
                                  "example": "Meeting with team"
                              },
                              "place": {
                                  "type": "string",
                                  "example": "Conference room"
                              },
                              "memo": {
                                  "type": "string",
                                  "example": "Discuss project status"
                              },
                              "isreptition": {
                                  "type": "string",
                                  "example": "F"
                              },
                              "scheduleTimes": {
                                  "type": "array",
                                  "items": {
                                      "type": "string"
                                  },
                                  "example": [
                                      "2023-12-17 09:00:00 11:00:00",
                                      "2023-12-25 10:00:00 12:00:00"
                                  ]
                              },
                              "reptitioncycle": {
                                  "type": "integer",
                                  "example": 0
                              },
                              "iscontinuous": {
                                  "type": "string",
                                  "example": "F"
                              },
                              "reptition_time": {
                                  "type": "integer",
                                  "example": 0
                              },
                              "end_date": {
                                  "type": "string",
                                  "example": "2024-01-01"
                              }
                          },
                          "required": ["color", "name", "scheduleTimes"]
                      }
                  }
              ],
              "responses": {
                  "201": {
                      "description": "Event successfully added to the calendar."
                  },
                  "400": {
                      "description": "Invalid input."
                  },
                  "401": {
                      "description": "Unauthorized. Only members can add events."
                  },
                  "500": {
                      "description": "Internal server error."
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/calendar/delete": {
          "delete": {
              "tags": ["calendar"],
              "summary": "Delete a calendar event",
              "description": "Deletes a specific calendar event along with all associated time entries. Requires user authentication.",
              "parameters": [
                  {
                      "name": "calendarId",
                      "in": "body",
                      "required": true,
                      "schema": {
                          "type": "object",
                          "properties": {
                              "calendarId": {
                                  "type": "integer",
                                  "example": 1,
                                  "description": "The unique identifier of the calendar event to delete."
                              }
                          },
                          "required": ["calendarId"]
                      },
                      "description": "A JSON object containing the calendarId of the event to be deleted."
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Calendar event deleted successfully."
                  },
                  "400": {
                      "description": "Invalid request. Please provide a valid calendarId."
                  },
                  "401": {
                      "description": "Unauthorized. Only authenticated members can delete events."
                  },
                  "404": {
                      "description": "Not Found. The calendar event does not exist or the calendarId is incorrect."
                  },
                  "500": {
                      "description": "Internal server error. Could not delete the event due to a server error."
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ],
              "produces": ["application/json"]
          }
      },
      "/calendar/update": {
          "patch": {
              "tags": ["calendar"],
              "summary": "Update an existing calendar event",
              "description": "Updates an existing event and its associated times in the calendar. Requires user authentication and that the caller is the owner of the event.",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "required": true,
                      "schema": {
                          "type": "object",
                          "properties": {
                              "calendarId": {
                                  "type": "integer",
                                  "example": 1,
                                  "description": "The unique identifier of the calendar event to update."
                              },
                              "color": {
                                  "type": "integer",
                                  "example": 5,
                                  "description": "Schedule color code (0-8)."
                              },
                              "name": {
                                  "type": "string",
                                  "example": "Meeting with team",
                                  "description": "Name of the event."
                              },
                              "place": {
                                  "type": "string",
                                  "example": "Conference room",
                                  "description": "Location of the event."
                              },
                              "memo": {
                                  "type": "string",
                                  "example": "Discuss project status",
                                  "description": "Additional notes about the event."
                              },
                              "isreptition": {
                                  "type": "string",
                                  "example": "F",
                                  "description": "Flag indicating if the event repeats ('T' or 'F')."
                              },
                              "scheduleTimes": {
                                  "type": "array",
                                  "items": {
                                      "type": "string"
                                  },
                                  "example": [
                                      "2023-12-17 09:00:00 11:00:00",
                                      "2023-12-25 10:00:00 12:00:00"
                                  ],
                                  "description": "List of new times for the event, in 'YYYY-MM-DD HH:MM:SS HH:MM:SS' format."
                              },
                              "reptitioncycle": {
                                  "type": "integer",
                                  "example": 0,
                                  "description": "How often the event repeats, in weeks (0 if it does not repeat)."
                              },
                              "iscontinuous": {
                                  "type": "string",
                                  "example": "F",
                                  "description": "Flag indicating if the event repeats continuously ('T' or 'F')."
                              },
                              "reptition_time": {
                                  "type": "integer",
                                  "example": 0,
                                  "description": "Number of times the event should repeat."
                              },
                              "end_date": {
                                  "type": "string",
                                  "example": "2024-01-01",
                                  "description": "End date for the event (if it repeats)."
                              }
                          },
                          "required": [
                              "calendarId",
                              "color",
                              "name",
                              "scheduleTimes"
                          ]
                      },
                      "description": "A JSON object containing details about the event to be updated."
                  }
              ],
              "responses": {
                  "200": {
                      "description": "Event updated successfully."
                  },
                  "400": {
                      "description": "Invalid request. Please ensure all required fields are filled correctly."
                  },
                  "401": {
                      "description": "Unauthorized. Only authenticated users can update events."
                  },
                  "404": {
                      "description": "Not found. No event found with the provided ID, or you do not own the event."
                  },
                  "500": {
                      "description": "Internal server error. Could not update the event due to a server error."
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ],
              "produces": ["application/json"]
          }
      },
      "/home/bookmark": {
          "patch": {
              "tags": ["home"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "isBookmark": {
                                  "example": "T or F"
                              },
                              "promiseId": {
                                  "example": 1
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/home/folder": {
          "post": {
              "description": "not in use",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "foldereName": {
                                  "example": "string"
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/home/totalpromise": {
          "get": {
              "tags": ["home"],
              "description": "",
              "parameters": [
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "name: 이름 순 정렬, id: 생성일 순 정렬",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "401": {
                      "description": "access denied"
                  },
                  "500": {
                      "description": "some errors"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/home/deletepromise": {
          "patch": {
              "tags": ["home"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "promiseId": {
                                  "example": [1, 2, 3]
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/home/trash": {
          "get": {
              "tags": ["home"],
              "description": "",
              "parameters": [
                  {
                      "name": "sortBy",
                      "in": "query",
                      "description": "name: 이름 순 정렬, id: 생성일 순 정렬",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "401": {
                      "description": "access denied"
                  },
                  "500": {
                      "description": "some errors"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/home/promisename": {
          "patch": {
              "tags": ["home"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "promiseName": {
                                  "example": "약속22"
                              },
                              "promiseId": {
                                  "example": 1
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/home/search": {
          "get": {
              "tags": ["home"],
              "description": "",
              "parameters": [
                  {
                      "name": "searchTerm",
                      "in": "query",
                      "description": "검색어를 넣어주세요",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "401": {
                      "description": "access denied"
                  },
                  "500": {
                      "description": "some errors"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/home/restore": {
          "patch": {
              "tags": ["home"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "promiseId": {
                                  "example": [1, 2, 3]
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "401": {
                      "description": "access denied"
                  },
                  "500": {
                      "description": "some errors"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/home/backoutpromise": {
          "delete": {
              "tags": ["home"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "promiseId": {
                                  "example": [1, 2, 3]
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "400": {
                      "description": "Bad Request"
                  },
                  "500": {
                      "description": "백엔드 에러"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/home/backoutall": {
          "delete": {
              "tags": ["home"],
              "description": "",
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "401": {
                      "description": "access denied"
                  },
                  "500": {
                      "description": "백엔드 에러"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/member/info": {
          "get": {
              "tags": ["member"],
              "description": "",
              "responses": {
                  "200": {
                      "description": "OK"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/member/resetname": {
          "patch": {
              "tags": ["member"],
              "description": "",
              "parameters": [
                  {
                      "name": "body",
                      "in": "body",
                      "schema": {
                          "type": "object",
                          "properties": {
                              "name": {
                                  "example": "seungho111"
                              }
                          }
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      },
      "/member/quit": {
          "delete": {
              "tags": ["member"],
              "description": "",
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "Not Found"
                  },
                  "500": {
                      "description": "백엔드 에러"
                  }
              },
              "security": [
                  {
                      "bearerAuth": []
                  }
              ]
          }
      }
  }
}